// Generated by gencpp from file tip/Vector.msg
// DO NOT EDIT!


#ifndef TIP_MESSAGE_VECTOR_H
#define TIP_MESSAGE_VECTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tip
{
template <class ContainerAllocator>
struct Vector_
{
  typedef Vector_<ContainerAllocator> Type;

  Vector_()
    : header()
    , x1(0)
    , y1(0)
    , x2(0)
    , y2(0)
    , x3(0)
    , y3(0)
    , x4(0)
    , y4(0)
    , x5(0)
    , y5(0)
    , x6(0)
    , y6(0)  {
    }
  Vector_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , x1(0)
    , y1(0)
    , x2(0)
    , y2(0)
    , x3(0)
    , y3(0)
    , x4(0)
    , y4(0)
    , x5(0)
    , y5(0)
    , x6(0)
    , y6(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _x1_type;
  _x1_type x1;

   typedef int64_t _y1_type;
  _y1_type y1;

   typedef int64_t _x2_type;
  _x2_type x2;

   typedef int64_t _y2_type;
  _y2_type y2;

   typedef int64_t _x3_type;
  _x3_type x3;

   typedef int64_t _y3_type;
  _y3_type y3;

   typedef int64_t _x4_type;
  _x4_type x4;

   typedef int64_t _y4_type;
  _y4_type y4;

   typedef int64_t _x5_type;
  _x5_type x5;

   typedef int64_t _y5_type;
  _y5_type y5;

   typedef int64_t _x6_type;
  _x6_type x6;

   typedef int64_t _y6_type;
  _y6_type y6;





  typedef boost::shared_ptr< ::tip::Vector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tip::Vector_<ContainerAllocator> const> ConstPtr;

}; // struct Vector_

typedef ::tip::Vector_<std::allocator<void> > Vector;

typedef boost::shared_ptr< ::tip::Vector > VectorPtr;
typedef boost::shared_ptr< ::tip::Vector const> VectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tip::Vector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tip::Vector_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tip

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'tip': ['/home/qingchen/catkin_ws/src/tip/msg'], 'qualisys': ['/home/qingchen/catkin_ws/src/qualisys/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tip::Vector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tip::Vector_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tip::Vector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tip::Vector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tip::Vector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tip::Vector_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tip::Vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db63733935ea0547529d8e2d68307f12";
  }

  static const char* value(const ::tip::Vector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb63733935ea0547ULL;
  static const uint64_t static_value2 = 0x529d8e2d68307f12ULL;
};

template<class ContainerAllocator>
struct DataType< ::tip::Vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tip/Vector";
  }

  static const char* value(const ::tip::Vector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tip::Vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int64 x1\n\
int64 y1\n\
int64 x2\n\
int64 y2\n\
int64 x3\n\
int64 y3\n\
int64 x4\n\
int64 y4\n\
int64 x5\n\
int64 y5\n\
int64 x6\n\
int64 y6\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::tip::Vector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tip::Vector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.x3);
      stream.next(m.y3);
      stream.next(m.x4);
      stream.next(m.y4);
      stream.next(m.x5);
      stream.next(m.y5);
      stream.next(m.x6);
      stream.next(m.y6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tip::Vector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tip::Vector_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y2);
    s << indent << "x3: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x3);
    s << indent << "y3: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y3);
    s << indent << "x4: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x4);
    s << indent << "y4: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y4);
    s << indent << "x5: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x5);
    s << indent << "y5: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y5);
    s << indent << "x6: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x6);
    s << indent << "y6: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TIP_MESSAGE_VECTOR_H
