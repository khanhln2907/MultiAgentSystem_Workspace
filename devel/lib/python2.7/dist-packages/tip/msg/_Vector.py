# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tip/Vector.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Vector(genpy.Message):
  _md5sum = "db63733935ea0547529d8e2d68307f12"
  _type = "tip/Vector"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
int64 x1
int64 y1
int64 x2
int64 y2
int64 x3
int64 y3
int64 x4
int64 y4
int64 x5
int64 y5
int64 x6
int64 y6

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','x1','y1','x2','y2','x3','y3','x4','y4','x5','y5','x6','y6']
  _slot_types = ['std_msgs/Header','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Vector, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.x1 is None:
        self.x1 = 0
      if self.y1 is None:
        self.y1 = 0
      if self.x2 is None:
        self.x2 = 0
      if self.y2 is None:
        self.y2 = 0
      if self.x3 is None:
        self.x3 = 0
      if self.y3 is None:
        self.y3 = 0
      if self.x4 is None:
        self.x4 = 0
      if self.y4 is None:
        self.y4 = 0
      if self.x5 is None:
        self.x5 = 0
      if self.y5 is None:
        self.y5 = 0
      if self.x6 is None:
        self.x6 = 0
      if self.y6 is None:
        self.y6 = 0
    else:
      self.header = std_msgs.msg.Header()
      self.x1 = 0
      self.y1 = 0
      self.x2 = 0
      self.y2 = 0
      self.x3 = 0
      self.y3 = 0
      self.x4 = 0
      self.y4 = 0
      self.x5 = 0
      self.y5 = 0
      self.x6 = 0
      self.y6 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_12q().pack(_x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4, _x.x5, _x.y5, _x.x6, _x.y6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4, _x.x5, _x.y5, _x.x6, _x.y6,) = _get_struct_12q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_12q().pack(_x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4, _x.x5, _x.y5, _x.x6, _x.y6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4, _x.x5, _x.y5, _x.x6, _x.y6,) = _get_struct_12q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12q = None
def _get_struct_12q():
    global _struct_12q
    if _struct_12q is None:
        _struct_12q = struct.Struct("<12q")
    return _struct_12q
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
